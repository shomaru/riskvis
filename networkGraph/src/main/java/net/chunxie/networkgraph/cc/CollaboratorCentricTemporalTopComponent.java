package net.chunxie.networkgraph.cc;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Paint;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import net.chunxie.networkdata.entity.ForumMessage;
import org.apache.commons.collections15.Transformer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.Range;
import org.jfree.data.time.Day;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.IntervalXYDataset;
import org.jfree.ui.RectangleInsets;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;

/**
 * @author chun.xie
 * @todo Write some documentation!
 * @created 08/02/13 17:18
 */
@ConvertAsProperties(dtd = "-//net.chunxie.networkgraph.cc//CollaboratorCentricTemporal//EN",
        autostore = false)
@TopComponent.Description(preferredID = "CollaboratorCentricTemporalTopComponent",
        iconBase = "net/chunxie/networkgraph/cc/chart_16.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "net.chunxie.networkgraph.cc.CollaboratorCentricTemporalTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_CollaboratorCentricTemporalAction",
        preferredID = "CollaboratorCentricTemporalTopComponent")
@Messages({
        "CTL_CollaboratorCentricTemporalAction=CollaboratorCentricTemporal",
        "CTL_CollaboratorCentricTemporalTopComponent=Temporal Chart",
        "HINT_CollaboratorCentricTemporalTopComponent=This is a Collaborator Centric network temporal chart window"
})
public final class CollaboratorCentricTemporalTopComponent extends TopComponent {
    private CollaboratorCentricTopComponent parent = null;
    private String timelineStr = "Current Time Point: ";
    private Calendar currentTimePoint = null;
    // indicates the number of days within the snapshot
    private int dayNum = 0;
    private TimeSeries series = null;
    private JFreeChart chart = null;
    private ChartPanel chartPanel = null;
    private DateFormat df = new SimpleDateFormat("dd/MM/yy");
    private Map<String, Integer> pointsMap = new HashMap<String, Integer>();

    public CollaboratorCentricTemporalTopComponent() {
        initComponents();
        setName(Bundle.CTL_CollaboratorCentricTemporalAction());
        setToolTipText(Bundle.HINT_CollaboratorCentricTemporalTopComponent());
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);

    }

    public CollaboratorCentricTemporalTopComponent(CollaboratorCentricTopComponent ccTopComponent) {
        this();
        this.parent = ccTopComponent;
        initData();
        initTimelineSlider();
        initVertexAndEdgeDrawPaint();
        initChart();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        timelineSlider = new javax.swing.JSlider();
        timelineLabel = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(600, 370));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 380, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 271, Short.MAX_VALUE)
        );

        timelineSlider.setPaintLabels(true);
        timelineSlider.setPaintTicks(true);
        timelineSlider.setValue(0);

        org.openide.awt.Mnemonics.setLocalizedText(timelineLabel, timelineStr);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(57, 57, 57)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(timelineSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                                                        .addComponent(timelineLabel, javax.swing.GroupLayout.Alignment.LEADING))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timelineLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timelineSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
    }// </editor-fold>

    // Variables declaration - do not modify
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel timelineLabel;
    private javax.swing.JSlider timelineSlider;
    // End of variables declaration

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void initTimelineSlider() {
        currentTimePoint = parent.snapshotUtil.getStartCal();
        dayNum = parent.snapshotUtil.getDayNum();

        final Calendar startCal = parent.snapshotUtil.getStartCal();
        Calendar endCal = parent.snapshotUtil.getEndCal();

        Hashtable sliderLabelTable = new Hashtable();
        sliderLabelTable.put(0, new JLabel("<html><center>" + df.format(startCal.getTime())));
        sliderLabelTable.put(dayNum, new JLabel("<html><center>" + df.format(endCal.getTime())));
        timelineSlider.setLabelTable(sliderLabelTable);
        timelineSlider.setValue(0);
        timelineSlider.setMinimum(0);
        timelineSlider.setMaximum(dayNum);
        timelineSlider.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                JSlider source = (JSlider) e.getSource();
                if (!source.getValueIsAdjusting()) {
                    currentTimePoint = parent.snapshotUtil.getStartCal();
                    Integer value = source.getValue();
                    currentTimePoint.add(Calendar.DATE, value);
                    timelineLabel.setText(timelineStr + df.format(currentTimePoint.getTime()));
                    parent.master.repaint();

                    XYPlot xyplot = (XYPlot) chart.getPlot();
                    PeriodAxis periodAxis = (PeriodAxis) xyplot.getDomainAxis();
                    Range range = periodAxis.getRange();
                    double cellLength = range.getLength() / (dayNum + 1);
                    double domainCrosshairValue = periodAxis.getLowerBound() + value * cellLength + cellLength / 2;
                    xyplot.setDomainCrosshairValue(domainCrosshairValue);
                }
            }
        });
    }

    private void initVertexAndEdgeDrawPaint() {
        Transformer<ForumMessage, Paint> edgePaint = new Transformer<ForumMessage, Paint>() {

            @Override
            public Paint transform(ForumMessage edge) {
                Paint result = null;
                if (edge.isSameDate(currentTimePoint)) {
                    return Color.RED;
                }
                if (result == null) {
                    return Color.LIGHT_GRAY;
                }
                return result;
            }
        };

        parent.master.getRenderContext().setEdgeDrawPaintTransformer(edgePaint);
        parent.satellite.getRenderContext().setEdgeDrawPaintTransformer(edgePaint);
    }

    private JFreeChart createChart() {
        JFreeChart jfreechart = ChartFactory.createXYBarChart("Awarded Points over Time", "Day of Snapshot", true, "Awarded Points", createDataset(), PlotOrientation.VERTICAL, true, true, false);
        XYPlot xyplot = (XYPlot) jfreechart.getPlot();
        xyplot.setInsets(new RectangleInsets(0.0D, 0.0D, 0.0D, 10D));
        xyplot.setDomainCrosshairVisible(true);
        xyplot.setDomainCrosshairLockedOnData(false);
        xyplot.setRangeCrosshairVisible(false);

        PeriodAxis periodaxis = new PeriodAxis("Day");
        periodaxis.setAutoRangeTimePeriodClass(Day.class);
        PeriodAxisLabelInfo aperiodaxislabelinfo[] = new PeriodAxisLabelInfo[3];
        aperiodaxislabelinfo[0] = new PeriodAxisLabelInfo(Day.class, new SimpleDateFormat("d"));
        aperiodaxislabelinfo[1] = new PeriodAxisLabelInfo(Day.class, new SimpleDateFormat("E"), new RectangleInsets(2D, 2D, 2D, 2D), new Font("SansSerif", 1, 10), Color.blue, false, new BasicStroke(0.0F), Color.lightGray);
        aperiodaxislabelinfo[2] = new PeriodAxisLabelInfo(Month.class, new SimpleDateFormat("MMM"));
        periodaxis.setLabelInfo(aperiodaxislabelinfo);

        xyplot.setDomainAxis(periodaxis);
        ChartUtilities.applyCurrentTheme(jfreechart);
        return jfreechart;
    }

    private IntervalXYDataset createDataset() {
        series = new TimeSeries("All Collaborators");
        RegularTimePeriod period = new Day(parent.snapshotUtil.getStartCal().getTime());

        for (int i = 0; i <= dayNum; i++) {
            Integer value = pointsMap.get(df.format(period.getStart()));
            if (value == null) {
                value = 0;
            }
            series.add(period, value);
            period = period.next();
        }

        TimeSeriesCollection timeseriescollection = new TimeSeriesCollection();
        timeseriescollection.addSeries(series);
        return timeseriescollection;
    }

    private void initChart() {
        chart = createChart();
        chart.addProgressListener(new ChartProgressListener() {

            @Override
            public void chartProgress(ChartProgressEvent cpe) {
                if (cpe.getType() != 2) {
                    return;
                }
                if (chartPanel != null) {
                    JFreeChart jfreechart = chartPanel.getChart();
                    if (jfreechart != null) {
                        XYPlot xyplot = (XYPlot) jfreechart.getPlot();
                        double domainCrosshairValue = xyplot.getDomainCrosshairValue();
                        PeriodAxis periodAxis = (PeriodAxis) xyplot.getDomainAxis();
                        Range range = periodAxis.getRange();
                        double cellLength = range.getLength() / (dayNum + 1);
                        double nCellLength = domainCrosshairValue - periodAxis.getLowerBound() - cellLength / 2;
                        double sliderValue = nCellLength / cellLength;
                        timelineSlider.setValue((int)sliderValue);
                    }
                }
            }
        });
        chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(700, 250));
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(chartPanel);
    }

    private void initData() {
        for (ForumMessage edge : parent.graph.getEdges()) {
            String key = df.format(edge.getCreationCal().getTime());
            Integer points = pointsMap.get(key);
            if (points == null) {
                pointsMap.put(key, edge.getAwardedpoints());
            } else {
                pointsMap.put(key, points + edge.getAwardedpoints());
            }
        }
    }
}
